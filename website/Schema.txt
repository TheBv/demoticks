type Event {
        eventid: Int!
        logid: Int!
        attacker: String
        victim: String
        killstreak: Int
        headshot: Boolean
        airshot: Boolean
        medicDrop: Boolean
        tick: Int!
        cap: Boolean
        lastcap: Boolean
        kill: Boolean
        backstab: Boolean
        medicDeath: Boolean
    }
    type Log {
        logid: Int
        date: Int
        redPoints: Int
        bluePoints: Int
        timeTaken: Int
        playeramount: String
        events: [Event]
        map: String
    }
    input InputPlayer {
        steam64: String
        name: String
        steam3: String
    }
    type Player {
        steam64: String
        name: String
        steamId3: String
    }
    input LogId {
        logid: [Int!]!
    }
    input Events {
        killstreak: Int
        headshot: Boolean
        airshot: Boolean
        medicDrop: Boolean
        tick: Int
        cap: Boolean
        lastcap: Boolean
        kill: Boolean
        backstab: Boolean
        medicDeath: Boolean
        andEvents: [Events]
        }
    input SearchEvent {
        logid: [Int]!
        attacker: [String!]
        victim: [String]
        orEvents: Events!
    }
    type Query {
        SearchEvents(input: SearchEvent): [Log]
        SearchPlayers(input: InputPlayer): [Player]
        AddLog(input: LogId): [Boolean]
    }